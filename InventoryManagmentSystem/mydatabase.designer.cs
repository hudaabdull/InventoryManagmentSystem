#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagmentSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Inventory")]
	public partial class mydatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCEO(CEO instance);
    partial void UpdateCEO(CEO instance);
    partial void DeleteCEO(CEO instance);
    partial void InsertCuOrder(CuOrder instance);
    partial void UpdateCuOrder(CuOrder instance);
    partial void DeleteCuOrder(CuOrder instance);
    partial void InsertCuOrderOutstanding(CuOrderOutstanding instance);
    partial void UpdateCuOrderOutstanding(CuOrderOutstanding instance);
    partial void DeleteCuOrderOutstanding(CuOrderOutstanding instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustSubmitOrder(CustSubmitOrder instance);
    partial void UpdateCustSubmitOrder(CustSubmitOrder instance);
    partial void DeleteCustSubmitOrder(CustSubmitOrder instance);
    partial void InsertEmpAdmin(EmpAdmin instance);
    partial void UpdateEmpAdmin(EmpAdmin instance);
    partial void DeleteEmpAdmin(EmpAdmin instance);
    partial void InsertDesigner(Designer instance);
    partial void UpdateDesigner(Designer instance);
    partial void DeleteDesigner(Designer instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertOutstandingItem(OutstandingItem instance);
    partial void UpdateOutstandingItem(OutstandingItem instance);
    partial void DeleteOutstandingItem(OutstandingItem instance);
    partial void InsertOutstanding(Outstanding instance);
    partial void UpdateOutstanding(Outstanding instance);
    partial void DeleteOutstanding(Outstanding instance);
    partial void InsertPoSubmittedSupplier(PoSubmittedSupplier instance);
    partial void UpdatePoSubmittedSupplier(PoSubmittedSupplier instance);
    partial void DeletePoSubmittedSupplier(PoSubmittedSupplier instance);
    partial void InsertPurchaseOrder(PurchaseOrder instance);
    partial void UpdatePurchaseOrder(PurchaseOrder instance);
    partial void DeletePurchaseOrder(PurchaseOrder instance);
    partial void InsertPurchaseReqQutation(PurchaseReqQutation instance);
    partial void UpdatePurchaseReqQutation(PurchaseReqQutation instance);
    partial void DeletePurchaseReqQutation(PurchaseReqQutation instance);
    partial void InsertQutation(Qutation instance);
    partial void UpdateQutation(Qutation instance);
    partial void DeleteQutation(Qutation instance);
    partial void InsertShipment(Shipment instance);
    partial void UpdateShipment(Shipment instance);
    partial void DeleteShipment(Shipment instance);
    partial void InsertWarehouse(Warehouse instance);
    partial void UpdateWarehouse(Warehouse instance);
    partial void DeleteWarehouse(Warehouse instance);
    partial void InsertWarehouseItem(WarehouseItem instance);
    partial void UpdateWarehouseItem(WarehouseItem instance);
    partial void DeleteWarehouseItem(WarehouseItem instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    #endregion
		
		public mydatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["InventoryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public mydatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mydatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mydatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mydatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CEO> CEOs
		{
			get
			{
				return this.GetTable<CEO>();
			}
		}
		
		public System.Data.Linq.Table<CuOrder> CuOrders
		{
			get
			{
				return this.GetTable<CuOrder>();
			}
		}
		
		public System.Data.Linq.Table<CuOrderOutstanding> CuOrderOutstandings
		{
			get
			{
				return this.GetTable<CuOrderOutstanding>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustSubmitOrder> CustSubmitOrders
		{
			get
			{
				return this.GetTable<CustSubmitOrder>();
			}
		}
		
		public System.Data.Linq.Table<EmpAdmin> EmpAdmins
		{
			get
			{
				return this.GetTable<EmpAdmin>();
			}
		}
		
		public System.Data.Linq.Table<Designer> Designers
		{
			get
			{
				return this.GetTable<Designer>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<OutstandingItem> OutstandingItems
		{
			get
			{
				return this.GetTable<OutstandingItem>();
			}
		}
		
		public System.Data.Linq.Table<Outstanding> Outstandings
		{
			get
			{
				return this.GetTable<Outstanding>();
			}
		}
		
		public System.Data.Linq.Table<PoSubmittedSupplier> PoSubmittedSuppliers
		{
			get
			{
				return this.GetTable<PoSubmittedSupplier>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseOrder> PurchaseOrders
		{
			get
			{
				return this.GetTable<PurchaseOrder>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseReqQutation> PurchaseReqQutations
		{
			get
			{
				return this.GetTable<PurchaseReqQutation>();
			}
		}
		
		public System.Data.Linq.Table<Qutation> Qutations
		{
			get
			{
				return this.GetTable<Qutation>();
			}
		}
		
		public System.Data.Linq.Table<Shipment> Shipments
		{
			get
			{
				return this.GetTable<Shipment>();
			}
		}
		
		public System.Data.Linq.Table<Warehouse> Warehouses
		{
			get
			{
				return this.GetTable<Warehouse>();
			}
		}
		
		public System.Data.Linq.Table<WarehouseItem> WarehouseItems
		{
			get
			{
				return this.GetTable<WarehouseItem>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CEO")]
	public partial class CEO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CEOID;
		
		private EntitySet<PurchaseOrder> _PurchaseOrders;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCEOIDChanging(int value);
    partial void OnCEOIDChanged();
    #endregion
		
		public CEO()
		{
			this._PurchaseOrders = new EntitySet<PurchaseOrder>(new Action<PurchaseOrder>(this.attach_PurchaseOrders), new Action<PurchaseOrder>(this.detach_PurchaseOrders));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEOID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CEOID
		{
			get
			{
				return this._CEOID;
			}
			set
			{
				if ((this._CEOID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCEOIDChanging(value);
					this.SendPropertyChanging();
					this._CEOID = value;
					this.SendPropertyChanged("CEOID");
					this.OnCEOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CEO_PurchaseOrder", Storage="_PurchaseOrders", ThisKey="CEOID", OtherKey="CEOID")]
		public EntitySet<PurchaseOrder> PurchaseOrders
		{
			get
			{
				return this._PurchaseOrders;
			}
			set
			{
				this._PurchaseOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CEO", Storage="_Employee", ThisKey="CEOID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CEO = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CEO = this;
						this._CEOID = value.EmployeeID;
					}
					else
					{
						this._CEOID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.CEO = this;
		}
		
		private void detach_PurchaseOrders(PurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.CEO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuOrder")]
	public partial class CuOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CuOrderID;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private string _OrderStatus;
		
		private string _Descreption;
		
		private EntitySet<CuOrderOutstanding> _CuOrderOutstandings;
		
		private EntitySet<CustSubmitOrder> _CustSubmitOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCuOrderIDChanging(int value);
    partial void OnCuOrderIDChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnOrderStatusChanging(string value);
    partial void OnOrderStatusChanged();
    partial void OnDescreptionChanging(string value);
    partial void OnDescreptionChanged();
    #endregion
		
		public CuOrder()
		{
			this._CuOrderOutstandings = new EntitySet<CuOrderOutstanding>(new Action<CuOrderOutstanding>(this.attach_CuOrderOutstandings), new Action<CuOrderOutstanding>(this.detach_CuOrderOutstandings));
			this._CustSubmitOrders = new EntitySet<CustSubmitOrder>(new Action<CustSubmitOrder>(this.attach_CustSubmitOrders), new Action<CustSubmitOrder>(this.detach_CustSubmitOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CuOrderID
		{
			get
			{
				return this._CuOrderID;
			}
			set
			{
				if ((this._CuOrderID != value))
				{
					this.OnCuOrderIDChanging(value);
					this.SendPropertyChanging();
					this._CuOrderID = value;
					this.SendPropertyChanged("CuOrderID");
					this.OnCuOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="NVarChar(10)")]
		public string OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descreption", DbType="NVarChar(150)")]
		public string Descreption
		{
			get
			{
				return this._Descreption;
			}
			set
			{
				if ((this._Descreption != value))
				{
					this.OnDescreptionChanging(value);
					this.SendPropertyChanging();
					this._Descreption = value;
					this.SendPropertyChanged("Descreption");
					this.OnDescreptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuOrder_CuOrderOutstanding", Storage="_CuOrderOutstandings", ThisKey="CuOrderID", OtherKey="CuOrderID")]
		public EntitySet<CuOrderOutstanding> CuOrderOutstandings
		{
			get
			{
				return this._CuOrderOutstandings;
			}
			set
			{
				this._CuOrderOutstandings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuOrder_CustSubmitOrder", Storage="_CustSubmitOrders", ThisKey="CuOrderID", OtherKey="CuOrderID")]
		public EntitySet<CustSubmitOrder> CustSubmitOrders
		{
			get
			{
				return this._CustSubmitOrders;
			}
			set
			{
				this._CustSubmitOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuOrderOutstandings(CuOrderOutstanding entity)
		{
			this.SendPropertyChanging();
			entity.CuOrder = this;
		}
		
		private void detach_CuOrderOutstandings(CuOrderOutstanding entity)
		{
			this.SendPropertyChanging();
			entity.CuOrder = null;
		}
		
		private void attach_CustSubmitOrders(CustSubmitOrder entity)
		{
			this.SendPropertyChanging();
			entity.CuOrder = this;
		}
		
		private void detach_CustSubmitOrders(CustSubmitOrder entity)
		{
			this.SendPropertyChanging();
			entity.CuOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuOrderOutstanding")]
	public partial class CuOrderOutstanding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CuOrderID;
		
		private int _ItemSID;
		
		private int _OutstandingID;
		
		private EntityRef<CuOrder> _CuOrder;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Outstanding> _Outstanding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCuOrderIDChanging(int value);
    partial void OnCuOrderIDChanged();
    partial void OnItemSIDChanging(int value);
    partial void OnItemSIDChanged();
    partial void OnOutstandingIDChanging(int value);
    partial void OnOutstandingIDChanged();
    #endregion
		
		public CuOrderOutstanding()
		{
			this._CuOrder = default(EntityRef<CuOrder>);
			this._Item = default(EntityRef<Item>);
			this._Outstanding = default(EntityRef<Outstanding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CuOrderID
		{
			get
			{
				return this._CuOrderID;
			}
			set
			{
				if ((this._CuOrderID != value))
				{
					if (this._CuOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuOrderIDChanging(value);
					this.SendPropertyChanging();
					this._CuOrderID = value;
					this.SendPropertyChanged("CuOrderID");
					this.OnCuOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemSID
		{
			get
			{
				return this._ItemSID;
			}
			set
			{
				if ((this._ItemSID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemSIDChanging(value);
					this.SendPropertyChanging();
					this._ItemSID = value;
					this.SendPropertyChanged("ItemSID");
					this.OnItemSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutstandingID
		{
			get
			{
				return this._OutstandingID;
			}
			set
			{
				if ((this._OutstandingID != value))
				{
					if (this._Outstanding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutstandingIDChanging(value);
					this.SendPropertyChanging();
					this._OutstandingID = value;
					this.SendPropertyChanged("OutstandingID");
					this.OnOutstandingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuOrder_CuOrderOutstanding", Storage="_CuOrder", ThisKey="CuOrderID", OtherKey="CuOrderID", IsForeignKey=true)]
		public CuOrder CuOrder
		{
			get
			{
				return this._CuOrder.Entity;
			}
			set
			{
				CuOrder previousValue = this._CuOrder.Entity;
				if (((previousValue != value) 
							|| (this._CuOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuOrder.Entity = null;
						previousValue.CuOrderOutstandings.Remove(this);
					}
					this._CuOrder.Entity = value;
					if ((value != null))
					{
						value.CuOrderOutstandings.Add(this);
						this._CuOrderID = value.CuOrderID;
					}
					else
					{
						this._CuOrderID = default(int);
					}
					this.SendPropertyChanged("CuOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CuOrderOutstanding", Storage="_Item", ThisKey="ItemSID", OtherKey="ItemSID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.CuOrderOutstandings.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.CuOrderOutstandings.Add(this);
						this._ItemSID = value.ItemSID;
					}
					else
					{
						this._ItemSID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_CuOrderOutstanding", Storage="_Outstanding", ThisKey="OutstandingID", OtherKey="OutstandingID", IsForeignKey=true)]
		public Outstanding Outstanding
		{
			get
			{
				return this._Outstanding.Entity;
			}
			set
			{
				Outstanding previousValue = this._Outstanding.Entity;
				if (((previousValue != value) 
							|| (this._Outstanding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Outstanding.Entity = null;
						previousValue.CuOrderOutstandings.Remove(this);
					}
					this._Outstanding.Entity = value;
					if ((value != null))
					{
						value.CuOrderOutstandings.Add(this);
						this._OutstandingID = value.OutstandingID;
					}
					else
					{
						this._OutstandingID = default(int);
					}
					this.SendPropertyChanged("Outstanding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<char> _Gender;
		
		private string _Email;
		
		private string _Phone;
		
		private string _City;
		
		private string _street;
		
		private System.Nullable<int> _Apt;
		
		private System.Nullable<int> _ZipCode;
		
		private EntitySet<CustSubmitOrder> _CustSubmitOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void OnAptChanging(System.Nullable<int> value);
    partial void OnAptChanged();
    partial void OnZipCodeChanging(System.Nullable<int> value);
    partial void OnZipCodeChanged();
    #endregion
		
		public Customer()
		{
			this._CustSubmitOrders = new EntitySet<CustSubmitOrder>(new Action<CustSubmitOrder>(this.attach_CustSubmitOrders), new Action<CustSubmitOrder>(this.detach_CustSubmitOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="NVarChar(40)")]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apt", DbType="Int")]
		public System.Nullable<int> Apt
		{
			get
			{
				return this._Apt;
			}
			set
			{
				if ((this._Apt != value))
				{
					this.OnAptChanging(value);
					this.SendPropertyChanging();
					this._Apt = value;
					this.SendPropertyChanged("Apt");
					this.OnAptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="Int")]
		public System.Nullable<int> ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustSubmitOrder", Storage="_CustSubmitOrders", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CustSubmitOrder> CustSubmitOrders
		{
			get
			{
				return this._CustSubmitOrders;
			}
			set
			{
				this._CustSubmitOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustSubmitOrders(CustSubmitOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustSubmitOrders(CustSubmitOrder entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustSubmitOrder")]
	public partial class CustSubmitOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CuOrderID;
		
		private int _CustomerID;
		
		private int _ItemSID;
		
		private int _QuantityOrder;
		
		private EntityRef<CuOrder> _CuOrder;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCuOrderIDChanging(int value);
    partial void OnCuOrderIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnItemSIDChanging(int value);
    partial void OnItemSIDChanged();
    partial void OnQuantityOrderChanging(int value);
    partial void OnQuantityOrderChanged();
    #endregion
		
		public CustSubmitOrder()
		{
			this._CuOrder = default(EntityRef<CuOrder>);
			this._Customer = default(EntityRef<Customer>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CuOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CuOrderID
		{
			get
			{
				return this._CuOrderID;
			}
			set
			{
				if ((this._CuOrderID != value))
				{
					if (this._CuOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuOrderIDChanging(value);
					this.SendPropertyChanging();
					this._CuOrderID = value;
					this.SendPropertyChanged("CuOrderID");
					this.OnCuOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemSID
		{
			get
			{
				return this._ItemSID;
			}
			set
			{
				if ((this._ItemSID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemSIDChanging(value);
					this.SendPropertyChanging();
					this._ItemSID = value;
					this.SendPropertyChanged("ItemSID");
					this.OnItemSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityOrder", DbType="Int NOT NULL")]
		public int QuantityOrder
		{
			get
			{
				return this._QuantityOrder;
			}
			set
			{
				if ((this._QuantityOrder != value))
				{
					this.OnQuantityOrderChanging(value);
					this.SendPropertyChanging();
					this._QuantityOrder = value;
					this.SendPropertyChanged("QuantityOrder");
					this.OnQuantityOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuOrder_CustSubmitOrder", Storage="_CuOrder", ThisKey="CuOrderID", OtherKey="CuOrderID", IsForeignKey=true)]
		public CuOrder CuOrder
		{
			get
			{
				return this._CuOrder.Entity;
			}
			set
			{
				CuOrder previousValue = this._CuOrder.Entity;
				if (((previousValue != value) 
							|| (this._CuOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuOrder.Entity = null;
						previousValue.CustSubmitOrders.Remove(this);
					}
					this._CuOrder.Entity = value;
					if ((value != null))
					{
						value.CustSubmitOrders.Add(this);
						this._CuOrderID = value.CuOrderID;
					}
					else
					{
						this._CuOrderID = default(int);
					}
					this.SendPropertyChanged("CuOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustSubmitOrder", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustSubmitOrders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustSubmitOrders.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CustSubmitOrder", Storage="_Item", ThisKey="ItemSID", OtherKey="ItemSID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.CustSubmitOrders.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.CustSubmitOrders.Add(this);
						this._ItemSID = value.ItemSID;
					}
					else
					{
						this._ItemSID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpAdmin")]
	public partial class EmpAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdminID;
		
		private EntitySet<PoSubmittedSupplier> _PoSubmittedSuppliers;
		
		private EntitySet<Qutation> _Qutations;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    #endregion
		
		public EmpAdmin()
		{
			this._PoSubmittedSuppliers = new EntitySet<PoSubmittedSupplier>(new Action<PoSubmittedSupplier>(this.attach_PoSubmittedSuppliers), new Action<PoSubmittedSupplier>(this.detach_PoSubmittedSuppliers));
			this._Qutations = new EntitySet<Qutation>(new Action<Qutation>(this.attach_Qutations), new Action<Qutation>(this.detach_Qutations));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpAdmin_PoSubmittedSupplier", Storage="_PoSubmittedSuppliers", ThisKey="AdminID", OtherKey="AdminID")]
		public EntitySet<PoSubmittedSupplier> PoSubmittedSuppliers
		{
			get
			{
				return this._PoSubmittedSuppliers;
			}
			set
			{
				this._PoSubmittedSuppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpAdmin_Qutation", Storage="_Qutations", ThisKey="AdminID", OtherKey="AdminID")]
		public EntitySet<Qutation> Qutations
		{
			get
			{
				return this._Qutations;
			}
			set
			{
				this._Qutations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpAdmin", Storage="_Employee", ThisKey="AdminID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmpAdmin = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmpAdmin = this;
						this._AdminID = value.EmployeeID;
					}
					else
					{
						this._AdminID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoSubmittedSuppliers(PoSubmittedSupplier entity)
		{
			this.SendPropertyChanging();
			entity.EmpAdmin = this;
		}
		
		private void detach_PoSubmittedSuppliers(PoSubmittedSupplier entity)
		{
			this.SendPropertyChanging();
			entity.EmpAdmin = null;
		}
		
		private void attach_Qutations(Qutation entity)
		{
			this.SendPropertyChanging();
			entity.EmpAdmin = this;
		}
		
		private void detach_Qutations(Qutation entity)
		{
			this.SendPropertyChanging();
			entity.EmpAdmin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Designer")]
	public partial class Designer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignerID;
		
		private EntitySet<Item> _Items;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignerIDChanging(int value);
    partial void OnDesignerIDChanged();
    #endregion
		
		public Designer()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DesignerID
		{
			get
			{
				return this._DesignerID;
			}
			set
			{
				if ((this._DesignerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerIDChanging(value);
					this.SendPropertyChanging();
					this._DesignerID = value;
					this.SendPropertyChanged("DesignerID");
					this.OnDesignerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_Item", Storage="_Items", ThisKey="DesignerID", OtherKey="DesignerID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Designer", Storage="_Employee", ThisKey="DesignerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Designer = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Designer = this;
						this._DesignerID = value.EmployeeID;
					}
					else
					{
						this._DesignerID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Designer = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Designer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemSID;
		
		private string _ItemID;
		
		private System.Nullable<int> _DesignerID;
		
		private string _ItemName;
		
		private string _ItemDescription;
		
		private System.Nullable<int> _NumberOfDefectiveItems;
		
		private string _DesignerComment;
		
		private decimal _UnitPrice;
		
		private System.Nullable<System.DateTime> _DateCheked;
		
		private string _ItemCategory;
		
		private EntitySet<CuOrderOutstanding> _CuOrderOutstandings;
		
		private EntitySet<CustSubmitOrder> _CustSubmitOrders;
		
		private EntitySet<OutstandingItem> _OutstandingItems;
		
		private EntitySet<WarehouseItem> _WarehouseItems;
		
		private EntityRef<Designer> _Designer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemSIDChanging(int value);
    partial void OnItemSIDChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnDesignerIDChanging(System.Nullable<int> value);
    partial void OnDesignerIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemDescriptionChanging(string value);
    partial void OnItemDescriptionChanged();
    partial void OnNumberOfDefectiveItemsChanging(System.Nullable<int> value);
    partial void OnNumberOfDefectiveItemsChanged();
    partial void OnDesignerCommentChanging(string value);
    partial void OnDesignerCommentChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnDateChekedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChekedChanged();
    partial void OnItemCategoryChanging(string value);
    partial void OnItemCategoryChanged();
    #endregion
		
		public Item()
		{
			this._CuOrderOutstandings = new EntitySet<CuOrderOutstanding>(new Action<CuOrderOutstanding>(this.attach_CuOrderOutstandings), new Action<CuOrderOutstanding>(this.detach_CuOrderOutstandings));
			this._CustSubmitOrders = new EntitySet<CustSubmitOrder>(new Action<CustSubmitOrder>(this.attach_CustSubmitOrders), new Action<CustSubmitOrder>(this.detach_CustSubmitOrders));
			this._OutstandingItems = new EntitySet<OutstandingItem>(new Action<OutstandingItem>(this.attach_OutstandingItems), new Action<OutstandingItem>(this.detach_OutstandingItems));
			this._WarehouseItems = new EntitySet<WarehouseItem>(new Action<WarehouseItem>(this.attach_WarehouseItems), new Action<WarehouseItem>(this.detach_WarehouseItems));
			this._Designer = default(EntityRef<Designer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemSID
		{
			get
			{
				return this._ItemSID;
			}
			set
			{
				if ((this._ItemSID != value))
				{
					this.OnItemSIDChanging(value);
					this.SendPropertyChanging();
					this._ItemSID = value;
					this.SendPropertyChanged("ItemSID");
					this.OnItemSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerID", DbType="Int")]
		public System.Nullable<int> DesignerID
		{
			get
			{
				return this._DesignerID;
			}
			set
			{
				if ((this._DesignerID != value))
				{
					if (this._Designer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignerIDChanging(value);
					this.SendPropertyChanging();
					this._DesignerID = value;
					this.SendPropertyChanged("DesignerID");
					this.OnDesignerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDescription", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ItemDescription
		{
			get
			{
				return this._ItemDescription;
			}
			set
			{
				if ((this._ItemDescription != value))
				{
					this.OnItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ItemDescription = value;
					this.SendPropertyChanged("ItemDescription");
					this.OnItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfDefectiveItems", DbType="Int")]
		public System.Nullable<int> NumberOfDefectiveItems
		{
			get
			{
				return this._NumberOfDefectiveItems;
			}
			set
			{
				if ((this._NumberOfDefectiveItems != value))
				{
					this.OnNumberOfDefectiveItemsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfDefectiveItems = value;
					this.SendPropertyChanged("NumberOfDefectiveItems");
					this.OnNumberOfDefectiveItemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignerComment", DbType="NVarChar(40)")]
		public string DesignerComment
		{
			get
			{
				return this._DesignerComment;
			}
			set
			{
				if ((this._DesignerComment != value))
				{
					this.OnDesignerCommentChanging(value);
					this.SendPropertyChanging();
					this._DesignerComment = value;
					this.SendPropertyChanged("DesignerComment");
					this.OnDesignerCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(9,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheked", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCheked
		{
			get
			{
				return this._DateCheked;
			}
			set
			{
				if ((this._DateCheked != value))
				{
					this.OnDateChekedChanging(value);
					this.SendPropertyChanging();
					this._DateCheked = value;
					this.SendPropertyChanged("DateCheked");
					this.OnDateChekedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCategory", DbType="NVarChar(50)")]
		public string ItemCategory
		{
			get
			{
				return this._ItemCategory;
			}
			set
			{
				if ((this._ItemCategory != value))
				{
					this.OnItemCategoryChanging(value);
					this.SendPropertyChanging();
					this._ItemCategory = value;
					this.SendPropertyChanged("ItemCategory");
					this.OnItemCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CuOrderOutstanding", Storage="_CuOrderOutstandings", ThisKey="ItemSID", OtherKey="ItemSID")]
		public EntitySet<CuOrderOutstanding> CuOrderOutstandings
		{
			get
			{
				return this._CuOrderOutstandings;
			}
			set
			{
				this._CuOrderOutstandings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CustSubmitOrder", Storage="_CustSubmitOrders", ThisKey="ItemSID", OtherKey="ItemSID")]
		public EntitySet<CustSubmitOrder> CustSubmitOrders
		{
			get
			{
				return this._CustSubmitOrders;
			}
			set
			{
				this._CustSubmitOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OutstandingItem", Storage="_OutstandingItems", ThisKey="ItemSID", OtherKey="ItemSID")]
		public EntitySet<OutstandingItem> OutstandingItems
		{
			get
			{
				return this._OutstandingItems;
			}
			set
			{
				this._OutstandingItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_WarehouseItem", Storage="_WarehouseItems", ThisKey="ItemSID", OtherKey="ItemSID")]
		public EntitySet<WarehouseItem> WarehouseItems
		{
			get
			{
				return this._WarehouseItems;
			}
			set
			{
				this._WarehouseItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designer_Item", Storage="_Designer", ThisKey="DesignerID", OtherKey="DesignerID", IsForeignKey=true)]
		public Designer Designer
		{
			get
			{
				return this._Designer.Entity;
			}
			set
			{
				Designer previousValue = this._Designer.Entity;
				if (((previousValue != value) 
							|| (this._Designer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designer.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Designer.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._DesignerID = value.DesignerID;
					}
					else
					{
						this._DesignerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Designer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuOrderOutstandings(CuOrderOutstanding entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_CuOrderOutstandings(CuOrderOutstanding entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_CustSubmitOrders(CustSubmitOrder entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_CustSubmitOrders(CustSubmitOrder entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_OutstandingItems(OutstandingItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_OutstandingItems(OutstandingItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_WarehouseItems(WarehouseItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_WarehouseItems(WarehouseItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutstandingItem")]
	public partial class OutstandingItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OutstandingID;
		
		private int _ItemSID;
		
		private System.Nullable<int> _QuantitytoBeOrdered;
		
		private System.Nullable<System.DateTime> _OutsDate;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Outstanding> _Outstanding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutstandingIDChanging(int value);
    partial void OnOutstandingIDChanged();
    partial void OnItemSIDChanging(int value);
    partial void OnItemSIDChanged();
    partial void OnQuantitytoBeOrderedChanging(System.Nullable<int> value);
    partial void OnQuantitytoBeOrderedChanged();
    partial void OnOutsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOutsDateChanged();
    #endregion
		
		public OutstandingItem()
		{
			this._Item = default(EntityRef<Item>);
			this._Outstanding = default(EntityRef<Outstanding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutstandingID
		{
			get
			{
				return this._OutstandingID;
			}
			set
			{
				if ((this._OutstandingID != value))
				{
					if (this._Outstanding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutstandingIDChanging(value);
					this.SendPropertyChanging();
					this._OutstandingID = value;
					this.SendPropertyChanged("OutstandingID");
					this.OnOutstandingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemSID
		{
			get
			{
				return this._ItemSID;
			}
			set
			{
				if ((this._ItemSID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemSIDChanging(value);
					this.SendPropertyChanging();
					this._ItemSID = value;
					this.SendPropertyChanged("ItemSID");
					this.OnItemSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantitytoBeOrdered", DbType="Int")]
		public System.Nullable<int> QuantitytoBeOrdered
		{
			get
			{
				return this._QuantitytoBeOrdered;
			}
			set
			{
				if ((this._QuantitytoBeOrdered != value))
				{
					this.OnQuantitytoBeOrderedChanging(value);
					this.SendPropertyChanging();
					this._QuantitytoBeOrdered = value;
					this.SendPropertyChanged("QuantitytoBeOrdered");
					this.OnQuantitytoBeOrderedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutsDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OutsDate
		{
			get
			{
				return this._OutsDate;
			}
			set
			{
				if ((this._OutsDate != value))
				{
					this.OnOutsDateChanging(value);
					this.SendPropertyChanging();
					this._OutsDate = value;
					this.SendPropertyChanged("OutsDate");
					this.OnOutsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OutstandingItem", Storage="_Item", ThisKey="ItemSID", OtherKey="ItemSID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.OutstandingItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.OutstandingItems.Add(this);
						this._ItemSID = value.ItemSID;
					}
					else
					{
						this._ItemSID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_OutstandingItem", Storage="_Outstanding", ThisKey="OutstandingID", OtherKey="OutstandingID", IsForeignKey=true)]
		public Outstanding Outstanding
		{
			get
			{
				return this._Outstanding.Entity;
			}
			set
			{
				Outstanding previousValue = this._Outstanding.Entity;
				if (((previousValue != value) 
							|| (this._Outstanding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Outstanding.Entity = null;
						previousValue.OutstandingItems.Remove(this);
					}
					this._Outstanding.Entity = value;
					if ((value != null))
					{
						value.OutstandingItems.Add(this);
						this._OutstandingID = value.OutstandingID;
					}
					else
					{
						this._OutstandingID = default(int);
					}
					this.SendPropertyChanged("Outstanding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Outstanding")]
	public partial class Outstanding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OutstandingID;
		
		private string _OutStatus;
		
		private EntitySet<CuOrderOutstanding> _CuOrderOutstandings;
		
		private EntitySet<OutstandingItem> _OutstandingItems;
		
		private EntitySet<PoSubmittedSupplier> _PoSubmittedSuppliers;
		
		private EntitySet<Shipment> _Shipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutstandingIDChanging(int value);
    partial void OnOutstandingIDChanged();
    partial void OnOutStatusChanging(string value);
    partial void OnOutStatusChanged();
    #endregion
		
		public Outstanding()
		{
			this._CuOrderOutstandings = new EntitySet<CuOrderOutstanding>(new Action<CuOrderOutstanding>(this.attach_CuOrderOutstandings), new Action<CuOrderOutstanding>(this.detach_CuOrderOutstandings));
			this._OutstandingItems = new EntitySet<OutstandingItem>(new Action<OutstandingItem>(this.attach_OutstandingItems), new Action<OutstandingItem>(this.detach_OutstandingItems));
			this._PoSubmittedSuppliers = new EntitySet<PoSubmittedSupplier>(new Action<PoSubmittedSupplier>(this.attach_PoSubmittedSuppliers), new Action<PoSubmittedSupplier>(this.detach_PoSubmittedSuppliers));
			this._Shipments = new EntitySet<Shipment>(new Action<Shipment>(this.attach_Shipments), new Action<Shipment>(this.detach_Shipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OutstandingID
		{
			get
			{
				return this._OutstandingID;
			}
			set
			{
				if ((this._OutstandingID != value))
				{
					this.OnOutstandingIDChanging(value);
					this.SendPropertyChanging();
					this._OutstandingID = value;
					this.SendPropertyChanged("OutstandingID");
					this.OnOutstandingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutStatus", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string OutStatus
		{
			get
			{
				return this._OutStatus;
			}
			set
			{
				if ((this._OutStatus != value))
				{
					this.OnOutStatusChanging(value);
					this.SendPropertyChanging();
					this._OutStatus = value;
					this.SendPropertyChanged("OutStatus");
					this.OnOutStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_CuOrderOutstanding", Storage="_CuOrderOutstandings", ThisKey="OutstandingID", OtherKey="OutstandingID")]
		public EntitySet<CuOrderOutstanding> CuOrderOutstandings
		{
			get
			{
				return this._CuOrderOutstandings;
			}
			set
			{
				this._CuOrderOutstandings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_OutstandingItem", Storage="_OutstandingItems", ThisKey="OutstandingID", OtherKey="OutstandingID")]
		public EntitySet<OutstandingItem> OutstandingItems
		{
			get
			{
				return this._OutstandingItems;
			}
			set
			{
				this._OutstandingItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_PoSubmittedSupplier", Storage="_PoSubmittedSuppliers", ThisKey="OutstandingID", OtherKey="OutstandingID")]
		public EntitySet<PoSubmittedSupplier> PoSubmittedSuppliers
		{
			get
			{
				return this._PoSubmittedSuppliers;
			}
			set
			{
				this._PoSubmittedSuppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_Shipment", Storage="_Shipments", ThisKey="OutstandingID", OtherKey="OutstandingID")]
		public EntitySet<Shipment> Shipments
		{
			get
			{
				return this._Shipments;
			}
			set
			{
				this._Shipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuOrderOutstandings(CuOrderOutstanding entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = this;
		}
		
		private void detach_CuOrderOutstandings(CuOrderOutstanding entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = null;
		}
		
		private void attach_OutstandingItems(OutstandingItem entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = this;
		}
		
		private void detach_OutstandingItems(OutstandingItem entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = null;
		}
		
		private void attach_PoSubmittedSuppliers(PoSubmittedSupplier entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = this;
		}
		
		private void detach_PoSubmittedSuppliers(PoSubmittedSupplier entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = null;
		}
		
		private void attach_Shipments(Shipment entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = this;
		}
		
		private void detach_Shipments(Shipment entity)
		{
			this.SendPropertyChanging();
			entity.Outstanding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PoSubmittedSupplier")]
	public partial class PoSubmittedSupplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseOrderID;
		
		private int _SupplierID;
		
		private int _AdminID;
		
		private int _OutstandingID;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private EntityRef<EmpAdmin> _EmpAdmin;
		
		private EntityRef<Outstanding> _Outstanding;
		
		private EntityRef<PurchaseOrder> _PurchaseOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseOrderIDChanging(int value);
    partial void OnPurchaseOrderIDChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    partial void OnOutstandingIDChanging(int value);
    partial void OnOutstandingIDChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    #endregion
		
		public PoSubmittedSupplier()
		{
			this._EmpAdmin = default(EntityRef<EmpAdmin>);
			this._Outstanding = default(EntityRef<Outstanding>);
			this._PurchaseOrder = default(EntityRef<PurchaseOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PurchaseOrderID
		{
			get
			{
				return this._PurchaseOrderID;
			}
			set
			{
				if ((this._PurchaseOrderID != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderID = value;
					this.SendPropertyChanged("PurchaseOrderID");
					this.OnPurchaseOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._EmpAdmin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutstandingID
		{
			get
			{
				return this._OutstandingID;
			}
			set
			{
				if ((this._OutstandingID != value))
				{
					if (this._Outstanding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutstandingIDChanging(value);
					this.SendPropertyChanging();
					this._OutstandingID = value;
					this.SendPropertyChanged("OutstandingID");
					this.OnOutstandingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpAdmin_PoSubmittedSupplier", Storage="_EmpAdmin", ThisKey="AdminID", OtherKey="AdminID", IsForeignKey=true)]
		public EmpAdmin EmpAdmin
		{
			get
			{
				return this._EmpAdmin.Entity;
			}
			set
			{
				EmpAdmin previousValue = this._EmpAdmin.Entity;
				if (((previousValue != value) 
							|| (this._EmpAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpAdmin.Entity = null;
						previousValue.PoSubmittedSuppliers.Remove(this);
					}
					this._EmpAdmin.Entity = value;
					if ((value != null))
					{
						value.PoSubmittedSuppliers.Add(this);
						this._AdminID = value.AdminID;
					}
					else
					{
						this._AdminID = default(int);
					}
					this.SendPropertyChanged("EmpAdmin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_PoSubmittedSupplier", Storage="_Outstanding", ThisKey="OutstandingID", OtherKey="OutstandingID", IsForeignKey=true)]
		public Outstanding Outstanding
		{
			get
			{
				return this._Outstanding.Entity;
			}
			set
			{
				Outstanding previousValue = this._Outstanding.Entity;
				if (((previousValue != value) 
							|| (this._Outstanding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Outstanding.Entity = null;
						previousValue.PoSubmittedSuppliers.Remove(this);
					}
					this._Outstanding.Entity = value;
					if ((value != null))
					{
						value.PoSubmittedSuppliers.Add(this);
						this._OutstandingID = value.OutstandingID;
					}
					else
					{
						this._OutstandingID = default(int);
					}
					this.SendPropertyChanged("Outstanding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseOrder_PoSubmittedSupplier", Storage="_PurchaseOrder", ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID", IsForeignKey=true)]
		public PurchaseOrder PurchaseOrder
		{
			get
			{
				return this._PurchaseOrder.Entity;
			}
			set
			{
				PurchaseOrder previousValue = this._PurchaseOrder.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrder.Entity = null;
						previousValue.PoSubmittedSuppliers.Remove(this);
					}
					this._PurchaseOrder.Entity = value;
					if ((value != null))
					{
						value.PoSubmittedSuppliers.Add(this);
						this._PurchaseOrderID = value.PurchaseOrderID;
					}
					else
					{
						this._PurchaseOrderID = default(int);
					}
					this.SendPropertyChanged("PurchaseOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrder")]
	public partial class PurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseOrderID;
		
		private int _CEOID;
		
		private string _Descreption;
		
		private System.Nullable<System.DateTime> _ReviewDate;
		
		private string _PoOrderStatus;
		
		private string _CEOComment;
		
		private EntitySet<PoSubmittedSupplier> _PoSubmittedSuppliers;
		
		private EntitySet<PurchaseReqQutation> _PurchaseReqQutations;
		
		private EntityRef<CEO> _CEO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseOrderIDChanging(int value);
    partial void OnPurchaseOrderIDChanged();
    partial void OnCEOIDChanging(int value);
    partial void OnCEOIDChanged();
    partial void OnDescreptionChanging(string value);
    partial void OnDescreptionChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviewDateChanged();
    partial void OnPoOrderStatusChanging(string value);
    partial void OnPoOrderStatusChanged();
    partial void OnCEOCommentChanging(string value);
    partial void OnCEOCommentChanged();
    #endregion
		
		public PurchaseOrder()
		{
			this._PoSubmittedSuppliers = new EntitySet<PoSubmittedSupplier>(new Action<PoSubmittedSupplier>(this.attach_PoSubmittedSuppliers), new Action<PoSubmittedSupplier>(this.detach_PoSubmittedSuppliers));
			this._PurchaseReqQutations = new EntitySet<PurchaseReqQutation>(new Action<PurchaseReqQutation>(this.attach_PurchaseReqQutations), new Action<PurchaseReqQutation>(this.detach_PurchaseReqQutations));
			this._CEO = default(EntityRef<CEO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PurchaseOrderID
		{
			get
			{
				return this._PurchaseOrderID;
			}
			set
			{
				if ((this._PurchaseOrderID != value))
				{
					this.OnPurchaseOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderID = value;
					this.SendPropertyChanged("PurchaseOrderID");
					this.OnPurchaseOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEOID", DbType="Int NOT NULL")]
		public int CEOID
		{
			get
			{
				return this._CEOID;
			}
			set
			{
				if ((this._CEOID != value))
				{
					if (this._CEO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCEOIDChanging(value);
					this.SendPropertyChanging();
					this._CEOID = value;
					this.SendPropertyChanged("CEOID");
					this.OnCEOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descreption", DbType="NVarChar(150)")]
		public string Descreption
		{
			get
			{
				return this._Descreption;
			}
			set
			{
				if ((this._Descreption != value))
				{
					this.OnDescreptionChanging(value);
					this.SendPropertyChanging();
					this._Descreption = value;
					this.SendPropertyChanged("Descreption");
					this.OnDescreptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoOrderStatus", DbType="NVarChar(10)")]
		public string PoOrderStatus
		{
			get
			{
				return this._PoOrderStatus;
			}
			set
			{
				if ((this._PoOrderStatus != value))
				{
					this.OnPoOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._PoOrderStatus = value;
					this.SendPropertyChanged("PoOrderStatus");
					this.OnPoOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEOComment", DbType="NVarChar(40)")]
		public string CEOComment
		{
			get
			{
				return this._CEOComment;
			}
			set
			{
				if ((this._CEOComment != value))
				{
					this.OnCEOCommentChanging(value);
					this.SendPropertyChanging();
					this._CEOComment = value;
					this.SendPropertyChanged("CEOComment");
					this.OnCEOCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseOrder_PoSubmittedSupplier", Storage="_PoSubmittedSuppliers", ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID")]
		public EntitySet<PoSubmittedSupplier> PoSubmittedSuppliers
		{
			get
			{
				return this._PoSubmittedSuppliers;
			}
			set
			{
				this._PoSubmittedSuppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseOrder_PurchaseReqQutation", Storage="_PurchaseReqQutations", ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID")]
		public EntitySet<PurchaseReqQutation> PurchaseReqQutations
		{
			get
			{
				return this._PurchaseReqQutations;
			}
			set
			{
				this._PurchaseReqQutations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CEO_PurchaseOrder", Storage="_CEO", ThisKey="CEOID", OtherKey="CEOID", IsForeignKey=true)]
		public CEO CEO
		{
			get
			{
				return this._CEO.Entity;
			}
			set
			{
				CEO previousValue = this._CEO.Entity;
				if (((previousValue != value) 
							|| (this._CEO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CEO.Entity = null;
						previousValue.PurchaseOrders.Remove(this);
					}
					this._CEO.Entity = value;
					if ((value != null))
					{
						value.PurchaseOrders.Add(this);
						this._CEOID = value.CEOID;
					}
					else
					{
						this._CEOID = default(int);
					}
					this.SendPropertyChanged("CEO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PoSubmittedSuppliers(PoSubmittedSupplier entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = this;
		}
		
		private void detach_PoSubmittedSuppliers(PoSubmittedSupplier entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = null;
		}
		
		private void attach_PurchaseReqQutations(PurchaseReqQutation entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = this;
		}
		
		private void detach_PurchaseReqQutations(PurchaseReqQutation entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseReqQutation")]
	public partial class PurchaseReqQutation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QutationID;
		
		private int _PurchaseOrderID;
		
		private int _SupplierID;
		
		private System.Nullable<System.DateTime> _PReqQuoDate;
		
		private EntityRef<PurchaseOrder> _PurchaseOrder;
		
		private EntityRef<Qutation> _Qutation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQutationIDChanging(int value);
    partial void OnQutationIDChanged();
    partial void OnPurchaseOrderIDChanging(int value);
    partial void OnPurchaseOrderIDChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnPReqQuoDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPReqQuoDateChanged();
    #endregion
		
		public PurchaseReqQutation()
		{
			this._PurchaseOrder = default(EntityRef<PurchaseOrder>);
			this._Qutation = default(EntityRef<Qutation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QutationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QutationID
		{
			get
			{
				return this._QutationID;
			}
			set
			{
				if ((this._QutationID != value))
				{
					if (this._Qutation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQutationIDChanging(value);
					this.SendPropertyChanging();
					this._QutationID = value;
					this.SendPropertyChanged("QutationID");
					this.OnQutationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PurchaseOrderID
		{
			get
			{
				return this._PurchaseOrderID;
			}
			set
			{
				if ((this._PurchaseOrderID != value))
				{
					if (this._PurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderID = value;
					this.SendPropertyChanged("PurchaseOrderID");
					this.OnPurchaseOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PReqQuoDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PReqQuoDate
		{
			get
			{
				return this._PReqQuoDate;
			}
			set
			{
				if ((this._PReqQuoDate != value))
				{
					this.OnPReqQuoDateChanging(value);
					this.SendPropertyChanging();
					this._PReqQuoDate = value;
					this.SendPropertyChanged("PReqQuoDate");
					this.OnPReqQuoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseOrder_PurchaseReqQutation", Storage="_PurchaseOrder", ThisKey="PurchaseOrderID", OtherKey="PurchaseOrderID", IsForeignKey=true)]
		public PurchaseOrder PurchaseOrder
		{
			get
			{
				return this._PurchaseOrder.Entity;
			}
			set
			{
				PurchaseOrder previousValue = this._PurchaseOrder.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseOrder.Entity = null;
						previousValue.PurchaseReqQutations.Remove(this);
					}
					this._PurchaseOrder.Entity = value;
					if ((value != null))
					{
						value.PurchaseReqQutations.Add(this);
						this._PurchaseOrderID = value.PurchaseOrderID;
					}
					else
					{
						this._PurchaseOrderID = default(int);
					}
					this.SendPropertyChanged("PurchaseOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qutation_PurchaseReqQutation", Storage="_Qutation", ThisKey="QutationID", OtherKey="QutationID", IsForeignKey=true)]
		public Qutation Qutation
		{
			get
			{
				return this._Qutation.Entity;
			}
			set
			{
				Qutation previousValue = this._Qutation.Entity;
				if (((previousValue != value) 
							|| (this._Qutation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qutation.Entity = null;
						previousValue.PurchaseReqQutations.Remove(this);
					}
					this._Qutation.Entity = value;
					if ((value != null))
					{
						value.PurchaseReqQutations.Add(this);
						this._QutationID = value.QutationID;
					}
					else
					{
						this._QutationID = default(int);
					}
					this.SendPropertyChanged("Qutation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Qutation")]
	public partial class Qutation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QutationID;
		
		private System.Nullable<int> _AdminID;
		
		private string _QutationStatus;
		
		private System.Nullable<System.DateTime> _QutationDate;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<System.DateTime> _ReviewDate;
		
		private string _Comment;
		
		private EntitySet<PurchaseReqQutation> _PurchaseReqQutations;
		
		private EntityRef<EmpAdmin> _EmpAdmin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQutationIDChanging(int value);
    partial void OnQutationIDChanged();
    partial void OnAdminIDChanging(System.Nullable<int> value);
    partial void OnAdminIDChanged();
    partial void OnQutationStatusChanging(string value);
    partial void OnQutationStatusChanged();
    partial void OnQutationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnQutationDateChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviewDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Qutation()
		{
			this._PurchaseReqQutations = new EntitySet<PurchaseReqQutation>(new Action<PurchaseReqQutation>(this.attach_PurchaseReqQutations), new Action<PurchaseReqQutation>(this.detach_PurchaseReqQutations));
			this._EmpAdmin = default(EntityRef<EmpAdmin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QutationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QutationID
		{
			get
			{
				return this._QutationID;
			}
			set
			{
				if ((this._QutationID != value))
				{
					this.OnQutationIDChanging(value);
					this.SendPropertyChanging();
					this._QutationID = value;
					this.SendPropertyChanged("QutationID");
					this.OnQutationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int")]
		public System.Nullable<int> AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._EmpAdmin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QutationStatus", DbType="NVarChar(10)")]
		public string QutationStatus
		{
			get
			{
				return this._QutationStatus;
			}
			set
			{
				if ((this._QutationStatus != value))
				{
					this.OnQutationStatusChanging(value);
					this.SendPropertyChanging();
					this._QutationStatus = value;
					this.SendPropertyChanged("QutationStatus");
					this.OnQutationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QutationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> QutationDate
		{
			get
			{
				return this._QutationDate;
			}
			set
			{
				if ((this._QutationDate != value))
				{
					this.OnQutationDateChanging(value);
					this.SendPropertyChanging();
					this._QutationDate = value;
					this.SendPropertyChanged("QutationDate");
					this.OnQutationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(80)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qutation_PurchaseReqQutation", Storage="_PurchaseReqQutations", ThisKey="QutationID", OtherKey="QutationID")]
		public EntitySet<PurchaseReqQutation> PurchaseReqQutations
		{
			get
			{
				return this._PurchaseReqQutations;
			}
			set
			{
				this._PurchaseReqQutations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpAdmin_Qutation", Storage="_EmpAdmin", ThisKey="AdminID", OtherKey="AdminID", IsForeignKey=true)]
		public EmpAdmin EmpAdmin
		{
			get
			{
				return this._EmpAdmin.Entity;
			}
			set
			{
				EmpAdmin previousValue = this._EmpAdmin.Entity;
				if (((previousValue != value) 
							|| (this._EmpAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpAdmin.Entity = null;
						previousValue.Qutations.Remove(this);
					}
					this._EmpAdmin.Entity = value;
					if ((value != null))
					{
						value.Qutations.Add(this);
						this._AdminID = value.AdminID;
					}
					else
					{
						this._AdminID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmpAdmin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseReqQutations(PurchaseReqQutation entity)
		{
			this.SendPropertyChanging();
			entity.Qutation = this;
		}
		
		private void detach_PurchaseReqQutations(PurchaseReqQutation entity)
		{
			this.SendPropertyChanging();
			entity.Qutation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shipment")]
	public partial class Shipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WarehouseID;
		
		private int _SupplierID;
		
		private int _OutstandingID;
		
		private System.Nullable<System.DateTime> _ShippingDate;
		
		private System.Nullable<System.DateTime> _ExpectedArrivalDate;
		
		private System.Nullable<System.DateTime> _ActualDate;
		
		private System.Nullable<int> _TrackingShippmentNumber;
		
		private string _ShipmentStatus;
		
		private EntityRef<Outstanding> _Outstanding;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWarehouseIDChanging(int value);
    partial void OnWarehouseIDChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnOutstandingIDChanging(int value);
    partial void OnOutstandingIDChanged();
    partial void OnShippingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShippingDateChanged();
    partial void OnExpectedArrivalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpectedArrivalDateChanged();
    partial void OnActualDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualDateChanged();
    partial void OnTrackingShippmentNumberChanging(System.Nullable<int> value);
    partial void OnTrackingShippmentNumberChanged();
    partial void OnShipmentStatusChanging(string value);
    partial void OnShipmentStatusChanged();
    #endregion
		
		public Shipment()
		{
			this._Outstanding = default(EntityRef<Outstanding>);
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutstandingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OutstandingID
		{
			get
			{
				return this._OutstandingID;
			}
			set
			{
				if ((this._OutstandingID != value))
				{
					if (this._Outstanding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutstandingIDChanging(value);
					this.SendPropertyChanging();
					this._OutstandingID = value;
					this.SendPropertyChanged("OutstandingID");
					this.OnOutstandingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShippingDate
		{
			get
			{
				return this._ShippingDate;
			}
			set
			{
				if ((this._ShippingDate != value))
				{
					this.OnShippingDateChanging(value);
					this.SendPropertyChanging();
					this._ShippingDate = value;
					this.SendPropertyChanged("ShippingDate");
					this.OnShippingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedArrivalDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpectedArrivalDate
		{
			get
			{
				return this._ExpectedArrivalDate;
			}
			set
			{
				if ((this._ExpectedArrivalDate != value))
				{
					this.OnExpectedArrivalDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedArrivalDate = value;
					this.SendPropertyChanged("ExpectedArrivalDate");
					this.OnExpectedArrivalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualDate
		{
			get
			{
				return this._ActualDate;
			}
			set
			{
				if ((this._ActualDate != value))
				{
					this.OnActualDateChanging(value);
					this.SendPropertyChanging();
					this._ActualDate = value;
					this.SendPropertyChanged("ActualDate");
					this.OnActualDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackingShippmentNumber", DbType="Int")]
		public System.Nullable<int> TrackingShippmentNumber
		{
			get
			{
				return this._TrackingShippmentNumber;
			}
			set
			{
				if ((this._TrackingShippmentNumber != value))
				{
					this.OnTrackingShippmentNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackingShippmentNumber = value;
					this.SendPropertyChanged("TrackingShippmentNumber");
					this.OnTrackingShippmentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipmentStatus", DbType="NVarChar(15)")]
		public string ShipmentStatus
		{
			get
			{
				return this._ShipmentStatus;
			}
			set
			{
				if ((this._ShipmentStatus != value))
				{
					this.OnShipmentStatusChanging(value);
					this.SendPropertyChanging();
					this._ShipmentStatus = value;
					this.SendPropertyChanged("ShipmentStatus");
					this.OnShipmentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Outstanding_Shipment", Storage="_Outstanding", ThisKey="OutstandingID", OtherKey="OutstandingID", IsForeignKey=true)]
		public Outstanding Outstanding
		{
			get
			{
				return this._Outstanding.Entity;
			}
			set
			{
				Outstanding previousValue = this._Outstanding.Entity;
				if (((previousValue != value) 
							|| (this._Outstanding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Outstanding.Entity = null;
						previousValue.Shipments.Remove(this);
					}
					this._Outstanding.Entity = value;
					if ((value != null))
					{
						value.Shipments.Add(this);
						this._OutstandingID = value.OutstandingID;
					}
					else
					{
						this._OutstandingID = default(int);
					}
					this.SendPropertyChanged("Outstanding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_Shipment", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="WarehouseID", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.Shipments.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.Shipments.Add(this);
						this._WarehouseID = value.WarehouseID;
					}
					else
					{
						this._WarehouseID = default(int);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Warehouse")]
	public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WarehouseID;
		
		private string _WarehouseLocation;
		
		private EntitySet<Shipment> _Shipments;
		
		private EntitySet<WarehouseItem> _WarehouseItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWarehouseIDChanging(int value);
    partial void OnWarehouseIDChanged();
    partial void OnWarehouseLocationChanging(string value);
    partial void OnWarehouseLocationChanged();
    #endregion
		
		public Warehouse()
		{
			this._Shipments = new EntitySet<Shipment>(new Action<Shipment>(this.attach_Shipments), new Action<Shipment>(this.detach_Shipments));
			this._WarehouseItems = new EntitySet<WarehouseItem>(new Action<WarehouseItem>(this.attach_WarehouseItems), new Action<WarehouseItem>(this.detach_WarehouseItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseLocation", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string WarehouseLocation
		{
			get
			{
				return this._WarehouseLocation;
			}
			set
			{
				if ((this._WarehouseLocation != value))
				{
					this.OnWarehouseLocationChanging(value);
					this.SendPropertyChanging();
					this._WarehouseLocation = value;
					this.SendPropertyChanged("WarehouseLocation");
					this.OnWarehouseLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_Shipment", Storage="_Shipments", ThisKey="WarehouseID", OtherKey="WarehouseID")]
		public EntitySet<Shipment> Shipments
		{
			get
			{
				return this._Shipments;
			}
			set
			{
				this._Shipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WarehouseItem", Storage="_WarehouseItems", ThisKey="WarehouseID", OtherKey="WarehouseID")]
		public EntitySet<WarehouseItem> WarehouseItems
		{
			get
			{
				return this._WarehouseItems;
			}
			set
			{
				this._WarehouseItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipments(Shipment entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_Shipments(Shipment entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_WarehouseItems(WarehouseItem entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_WarehouseItems(WarehouseItem entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WarehouseItem")]
	public partial class WarehouseItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemSID;
		
		private int _WarehouseID;
		
		private string _CabinetNumber;
		
		private string _ShelveNumber;
		
		private System.Nullable<int> _QuantityAvailbale;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemSIDChanging(int value);
    partial void OnItemSIDChanged();
    partial void OnWarehouseIDChanging(int value);
    partial void OnWarehouseIDChanged();
    partial void OnCabinetNumberChanging(string value);
    partial void OnCabinetNumberChanged();
    partial void OnShelveNumberChanging(string value);
    partial void OnShelveNumberChanged();
    partial void OnQuantityAvailbaleChanging(System.Nullable<int> value);
    partial void OnQuantityAvailbaleChanged();
    #endregion
		
		public WarehouseItem()
		{
			this._Item = default(EntityRef<Item>);
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemSID
		{
			get
			{
				return this._ItemSID;
			}
			set
			{
				if ((this._ItemSID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemSIDChanging(value);
					this.SendPropertyChanging();
					this._ItemSID = value;
					this.SendPropertyChanged("ItemSID");
					this.OnItemSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CabinetNumber", DbType="NVarChar(10)")]
		public string CabinetNumber
		{
			get
			{
				return this._CabinetNumber;
			}
			set
			{
				if ((this._CabinetNumber != value))
				{
					this.OnCabinetNumberChanging(value);
					this.SendPropertyChanging();
					this._CabinetNumber = value;
					this.SendPropertyChanged("CabinetNumber");
					this.OnCabinetNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelveNumber", DbType="NVarChar(10)")]
		public string ShelveNumber
		{
			get
			{
				return this._ShelveNumber;
			}
			set
			{
				if ((this._ShelveNumber != value))
				{
					this.OnShelveNumberChanging(value);
					this.SendPropertyChanging();
					this._ShelveNumber = value;
					this.SendPropertyChanged("ShelveNumber");
					this.OnShelveNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityAvailbale", DbType="Int")]
		public System.Nullable<int> QuantityAvailbale
		{
			get
			{
				return this._QuantityAvailbale;
			}
			set
			{
				if ((this._QuantityAvailbale != value))
				{
					this.OnQuantityAvailbaleChanging(value);
					this.SendPropertyChanging();
					this._QuantityAvailbale = value;
					this.SendPropertyChanged("QuantityAvailbale");
					this.OnQuantityAvailbaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_WarehouseItem", Storage="_Item", ThisKey="ItemSID", OtherKey="ItemSID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.WarehouseItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.WarehouseItems.Add(this);
						this._ItemSID = value.ItemSID;
					}
					else
					{
						this._ItemSID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_WarehouseItem", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="WarehouseID", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.WarehouseItems.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.WarehouseItems.Add(this);
						this._WarehouseID = value.WarehouseID;
					}
					else
					{
						this._WarehouseID = default(int);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _UserName;
		
		private string _EmPassword;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Type;
		
		private EntityRef<CEO> _CEO;
		
		private EntityRef<EmpAdmin> _EmpAdmin;
		
		private EntityRef<Designer> _Designer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmPasswordChanging(string value);
    partial void OnEmPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Employee()
		{
			this._CEO = default(EntityRef<CEO>);
			this._EmpAdmin = default(EntityRef<EmpAdmin>);
			this._Designer = default(EntityRef<Designer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmPassword", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string EmPassword
		{
			get
			{
				return this._EmPassword;
			}
			set
			{
				if ((this._EmPassword != value))
				{
					this.OnEmPasswordChanging(value);
					this.SendPropertyChanging();
					this._EmPassword = value;
					this.SendPropertyChanged("EmPassword");
					this.OnEmPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CEO", Storage="_CEO", ThisKey="EmployeeID", OtherKey="CEOID", IsUnique=true, IsForeignKey=false)]
		public CEO CEO
		{
			get
			{
				return this._CEO.Entity;
			}
			set
			{
				CEO previousValue = this._CEO.Entity;
				if (((previousValue != value) 
							|| (this._CEO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CEO.Entity = null;
						previousValue.Employee = null;
					}
					this._CEO.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("CEO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpAdmin", Storage="_EmpAdmin", ThisKey="EmployeeID", OtherKey="AdminID", IsUnique=true, IsForeignKey=false)]
		public EmpAdmin EmpAdmin
		{
			get
			{
				return this._EmpAdmin.Entity;
			}
			set
			{
				EmpAdmin previousValue = this._EmpAdmin.Entity;
				if (((previousValue != value) 
							|| (this._EmpAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpAdmin.Entity = null;
						previousValue.Employee = null;
					}
					this._EmpAdmin.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("EmpAdmin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Designer", Storage="_Designer", ThisKey="EmployeeID", OtherKey="DesignerID", IsUnique=true, IsForeignKey=false)]
		public Designer Designer
		{
			get
			{
				return this._Designer.Entity;
			}
			set
			{
				Designer previousValue = this._Designer.Entity;
				if (((previousValue != value) 
							|| (this._Designer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designer.Entity = null;
						previousValue.Employee = null;
					}
					this._Designer.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("Designer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierID;
		
		private string _SupplierName;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Adress;
		
		private string _UserNamer;
		
		private string _Passowrd;
		
		private string _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAdressChanging(string value);
    partial void OnAdressChanged();
    partial void OnUserNamerChanging(string value);
    partial void OnUserNamerChanged();
    partial void OnPassowrdChanging(string value);
    partial void OnPassowrdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public Supplier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this.OnSupplierNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierName = value;
					this.SendPropertyChanged("SupplierName");
					this.OnSupplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adress", DbType="NVarChar(50)")]
		public string Adress
		{
			get
			{
				return this._Adress;
			}
			set
			{
				if ((this._Adress != value))
				{
					this.OnAdressChanging(value);
					this.SendPropertyChanging();
					this._Adress = value;
					this.SendPropertyChanged("Adress");
					this.OnAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNamer", DbType="NVarChar(10)")]
		public string UserNamer
		{
			get
			{
				return this._UserNamer;
			}
			set
			{
				if ((this._UserNamer != value))
				{
					this.OnUserNamerChanging(value);
					this.SendPropertyChanging();
					this._UserNamer = value;
					this.SendPropertyChanged("UserNamer");
					this.OnUserNamerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passowrd", DbType="NChar(10)")]
		public string Passowrd
		{
			get
			{
				return this._Passowrd;
			}
			set
			{
				if ((this._Passowrd != value))
				{
					this.OnPassowrdChanging(value);
					this.SendPropertyChanging();
					this._Passowrd = value;
					this.SendPropertyChanged("Passowrd");
					this.OnPassowrdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(20)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
